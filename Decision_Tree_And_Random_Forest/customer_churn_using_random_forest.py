# -*- coding: utf-8 -*-
"""customer_churn_using_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179pisF473WQ2uTkLxcRra1tP5GCoIO6-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/customer_churn-2.csv')
df

df.shape

df.info()

df.isnull().sum()

df.duplicated()
#df[df.duplicated()]

df.info()

df['Partner'].dtype

cols = list(df.columns)
for i in cols:
  if df[i].dtype == 'object':
    df[i] = df[i].astype('category').cat.codes

df.info()

df.isnull().sum()

df['PaymentMethod'].value_counts()

cols = list(df.columns)
for col in cols:
  if col != 'Churn':
      plt.figure(figsize=(15,10))
      sns.countplot(data=df,x=col,hue='Churn')
      plt.show()

df.drop(columns=['customerID'],inplace=True)

df

plt.figure(figsize=(30,10))
plt.subplot(1,2,1)
sns.scatterplot(data=df,x='MonthlyCharges',y='tenure',hue='Churn')
plt.subplot(1,2,2)
sns.scatterplot(data=df,x='TotalCharges',y='tenure',hue='Churn')
plt.show()

plt.figure(figsize=(20,10))
sns.heatmap(df.corr(),annot=True,)
plt.show()

X = df.drop(columns=['Churn'])
y = df['Churn']

x_train, x_test, y_train, y_test = train_test_split(X,y,random_state=0,test_size=0.2)
print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

rf = RandomForestClassifier(random_state=20)

rf1 = rf.fit(x_train,y_train)
y_pred = rf1.predict(x_test)

def metrics(y_pred,y_test,dom):
  print(f'{dom} Metrics')
  cm = confusion_matrix(y_pred,y_test)
  sns.heatmap(cm,annot=True,fmt='g')
  print(accuracy_score(y_pred,y_test)*100)
  print(classification_report(y_pred,y_test))

accuracy_score(rf1.predict(x_train),y_train)*100

accuracy_score(y_pred,y_test)*100

from sklearn.model_selection import RandomizedSearchCV

n_estimators = [int(i) for i in np.linspace(start=200,stop=2000,num=10)]
max_features = ['auto','sqrt']
max_depth = [int(i) for i in np.linspace(10,110,num=11)]
min_samples_split = [2,5,10]
min_samples_leaf = [1,2,4]
bootstrap = [True,False]
random_grid = {'n_estimators' : n_estimators, 'max_features' : max_features, 'max_depth' : max_depth, 'min_samples_split' : min_samples_split, 'min_samples_leaf' : min_samples_leaf, 'bootstrap' : bootstrap}
print(random_grid)

rf = RandomForestClassifier(random_state = 20)

rf_random = RandomizedSearchCV(estimator = rf, n_iter = 100, param_distributions = random_grid , cv = 3, n_jobs = -1, random_state = 20, return_train_score = True, scoring = 'neg_mean_absolute_error', verbose = 2)
rf2 = rf_random.fit(x_train,y_train)

rf2.best_params_

y_pred = rf2.predict(x_test)

print(metrics(y_pred,y_test,dom='Test'))

print(metrics(rf2.predict(x_train),y_train,dom='Train'))