# -*- coding: utf-8 -*-
"""heart_risk_analysis_decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rjdq2dhvji1KuwyseWoqiQLoicM1gIxi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/heart-1.csv')
df

df.shape

df.info()

df.describe().T

df.isnull().sum()

df['target'].value_counts()

plt.figure(figsize=(30,10))
sns.heatmap(df.corr(),annot=True)
plt.show()

df

plt.title('Age Distribution')
df['age'].hist(bins=10)

plt.title('Trestbps Distribution')
df['trestbps'].hist(bins=10)

cols = list(df.columns)
for col in cols:
  if col != 'target':
      plt.figure(figsize=(15,10))
      sns.countplot(data=df,x=col,hue='target')
      plt.show()

sns.pairplot(df)

plt.figure(figsize=(30,10))
sns.scatterplot(data=df,hue='sex',x='chol',y='trestbps')
plt.show()

X = df.drop(columns=['target'])
y = df['target']

x_train, x_test, y_train, y_test = train_test_split(X,y,random_state=0,test_size=0.3)
print(x_train.shape,
x_test.shape,
y_train.shape,
y_test.shape)

clf = tree.DecisionTreeClassifier()
clf.fit(x_train,y_train)
y_train_pred = clf.predict(x_train)
y_test_pred = clf.predict(x_test)

y_train_pred

y_test_pred

def plot_cm(y_train_pred,y_train,dom):
  print(f'{dom} Confusion Matrix')
  cm = confusion_matrix(y_train_pred,y_train)
  sns.heatmap(cm,annot=True,fmt='g')
  plt.tight_layout()
  plt.show()

print(accuracy_score(y_train_pred,y_train))
print(accuracy_score(y_test_pred,y_test))

plot_cm(y_train_pred,y_train,dom='Training Data')

plot_cm(y_test_pred,y_test,dom='Testing Data')

c_parameter_name = 'Max_Depth'
c_parameter_values = list(range(1,50))
df_acc_test = pd.DataFrame(columns=[c_parameter_name])
for i in c_parameter_values:
  model = tree.DecisionTreeClassifier(max_depth=i,splitter='best')
  y_pred_train = model.fit(x_train,y_train)
  y_pred = model.predict(x_test)
  acc_score = accuracy_score(y_test,y_pred)*100
  df_acc_test = df_acc_test.append({c_parameter_name : i, 'Accuracy' : acc_score},ignore_index=True)

df_acc_test

clf = tree.DecisionTreeClassifier(max_depth=3,splitter='best')
clf.fit(x_train,y_train)
y_train_pred = clf.predict(x_train)
y_test_pred = clf.predict(x_test)

plot_cm(y_test_pred,y_test,dom='Test Data')

print(classification_report(y_test_pred,y_test))