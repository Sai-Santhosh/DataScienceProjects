# -*- coding: utf-8 -*-
"""K_Means_Clustering_Cricket_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/141ARTlQHp7QevNlmymy90m7I6n-MHgvc
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Crickets.csv',encoding = 'latin')
df

df.shape

df.info()

df.describe()

df['HS'] = df.HS.str.extract('(\d+)')
df['HS'] = df['HS'].astype(int)
df.info()

df[['start','end']] = df.Span.str.split("-",expand=True)
df[['start','end']] = df[['start','end']].astype(int)
df

df['Span'] = df['end'] - df['start']
df = df.drop(columns=['start','end'])
df

df.info()

df.isnull().sum()

df[df.duplicated()]

plt.figure(figsize=(20,10))
sns.heatmap(df.corr(),annot =True)
plt.show()

df

cols = ['Span','Mat','Inns','NO','Runs','HS','Ave','BF','SR','100','50','0']
for col in cols:
  plt.figure(figsize=(20,10))
  sns.barplot(x='Player',y=col,data=df)
  plt.xticks(rotation=90)
  plt.ylabel(col)
  plt.show()

cols = ['Span','Mat','Inns','NO','Runs','HS','Ave','BF','SR','100','50','0']
for col in cols:
  plt.figure(figsize=(20,10))
  sns.boxplot(y=col,data=df)
  plt.ylabel(col)
  plt.show()

cols = ['Span','Mat','Inns','NO','Runs','HS','Ave','BF','SR','100','50','0']
for col in cols:
  Q3 = df[col].quantile(0.99)
  Q1 = df[col].quantile(0.01)
  df[col][df[col]<=Q1]=Q1
  df[col][df[col]>=Q3]=Q3

cols = ['Span','Mat','Inns','NO','Runs','HS','Ave','BF','SR','100','50','0']
for col in cols:
  plt.figure(figsize=(20,10))
  sns.boxplot(y=col,data=df)
  plt.ylabel(col)
  plt.show()

cols = ['Span','Mat','Inns','NO','Runs','HS','Ave','BF','SR','100','50','0']
for col in cols:
  plt.figure(figsize=(20,10))
  sns.violinplot(y=col,data=df)
  plt.ylabel(col)
  plt.show()

df_dropped = df.drop(columns=['Player'])
df_dropped

scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df_dropped),columns=df_dropped.columns)
df_scaled

sse = []
for i in range(1,10):
  kmeans = KMeans(n_clusters=i,random_state=1).fit(df_scaled)
  sse.append(kmeans.inertia_)
plt.figure(figsize=(20,10))
sns.lineplot(x=list(range(1,10)),y=sse,marker='x',color='blue')
plt.show()

sil = []
for i in range(2,10):
  kmeans = KMeans(n_clusters=i,random_state=1).fit(df_scaled)
  labels = kmeans.predict(df_scaled)
  sil.append(silhouette_score(df_scaled,labels))
plt.figure(figsize=(20,10))
sns.lineplot(x=list(range(2,10)),y=sil,marker='o',color='red')
plt.show()

kmeans = KMeans(n_clusters=2,random_state=1).fit(df_scaled)
labels = kmeans.predict(df_scaled)
df['KMeans_Labels'] = labels
df

df[df['KMeans_Labels']==0].sort_values(by=['Mat','Inns','Ave','SR','Runs'],ascending=[False,False,False,False,False]).head()

df[df['KMeans_Labels']==1].sort_values(by=['Mat','Inns','Ave','SR','Runs'],ascending=[False,False,False,False,False]).head()

mean = df.groupby('KMeans_Labels').mean()
df_compare = pd.DataFrame(mean)
df_compare.index = ['g0 mean','g1 mean']
df_compare

cols = list(df_dropped.columns)
for col in cols:
  sns.scatterplot(data = df, x=col, y='Mat', hue='KMeans_Labels', palette='Dark2')
  plt.xlabel(col)
  plt.show()

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200)
plt.show()

