# -*- coding: utf-8 -*-
"""K_Means_Clustering_Online_Retail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIUxD9EVgyOvL07YIKpjQQKqdp2uP7d1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/OnlineRetail.csv',encoding='latin')
df

df.shape

df.info()

df['Country'].value_counts()

df['StockCode'].value_counts()

df['Description'].value_counts()

df.isnull().sum()

df = df.dropna(subset=['Description'])

df['CustomerID'].fillna(df['CustomerID'].mean(),inplace=True)

df.isnull().sum()

# df.duplicated().sum()
df[df.duplicated()]

df.drop_duplicates(inplace=True)

df.duplicated().sum()
df

df.describe()

df['CustomerID'] = df['CustomerID'].astype(str)

df['CustomerID'].info()

# Creating a new dataframe with (1) Recent transactions i.e. the latest transaction (2) Frequency of transactions i.e. no of transactions which each customer has made (3) Monetary or the total amount that each customer has spent
df['Amount'] = df['UnitPrice'] * df['Quantity']
df_m = df.groupby('CustomerID')['Amount'].sum()
df_m = df_m.reset_index()

df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], format='%m/%d/%Y %H:%M')
last_transaction = max(df['InvoiceDate'])
last_transaction

df['Last Transaction'] = last_transaction - df['InvoiceDate']
df_r = df.groupby('CustomerID')['Last Transaction'].min()
df_r = df_r.reset_index()
df_r['Last Transaction'] = df_r['Last Transaction'].dt.days
df_r

df_f = df.groupby('CustomerID')['InvoiceNo'].count()
df_f = df_f.reset_index()

# Merging all three dataframes df_r, df_f, df_m
df_new = pd.merge(df_r,df_m,on='CustomerID',how='inner')
df_new = pd.merge(df_new, df_f,on='CustomerID',how='inner')
df_new.columns = ['CustomerID','Recency','Amount','Orders']
df_new

attributes = ['Recency', 'Amount', 'Orders']
plt.figure(figsize=(10,5))
sns.boxplot(data=df_new[attributes])
plt.show()

# Removing the outliers from above columns
Q1 = df_new.Recency.quantile(0.05)
Q3 = df_new.Recency.quantile(0.95)
IQR = Q3 - Q1
df_new = df_new[(df_new.Recency >= Q1 - 1.5*IQR) & (df_new.Recency <= Q3 + 1.5*IQR)]

Q1 = df_new.Orders.quantile(0.05)
Q3 = df_new.Orders.quantile(0.95)
IQR = Q3 - Q1
df_new = df_new[(df_new.Orders >= Q1 - 1.5*IQR) & (df_new.Orders <= Q3 + 1.5*IQR)]

Q1 = df_new.Amount.quantile(0.05)
Q3 = df_new.Amount.quantile(0.95)
IQR = Q3 - Q1
df_new = df_new[(df_new.Amount >= Q1 - 1.5*IQR) & (df_new.Amount <= Q3 + 1.5*IQR)]

attributes = ['Recency', 'Amount', 'Orders']
plt.figure(figsize=(10,5))
sns.boxplot(data=df_new[attributes])
plt.show()

scaler = StandardScaler()
df_new_scaled = pd.DataFrame(scaler.fit_transform(df_new),columns=df_new.columns)
df_new_scaled

df_new_scaled_copy = df_new_scaled.copy()
df_new_scaled_copy

sse = []
for i in range(1,10):
  kmeans = KMeans(n_clusters = i,random_state=1).fit(df_new_scaled)
  sse.append(kmeans.inertia_)

plt.figure(figsize=(10,5))
plt.plot(list(range(1,10)),sse,color='red',marker='o')
plt.show()

# Silhouette Score Calculation
sil = []
for i in range(2,10):
  kmeans = KMeans(n_clusters=i,random_state=1).fit(df_new_scaled)
  label = kmeans.predict(df_new_scaled)
  sil.append(silhouette_score(df_new_scaled,label))

plt.figure(figsize=(10,5))
plt.plot(list(range(2,10)),sil,color='blue',alpha=0.5,marker='x')
plt.show()

# Best number of clusters is 2 as seen above from elbow and silhouette method and there use k=2 for model building
kmeans = KMeans(n_clusters=2,random_state=1).fit(df_new_scaled)
labels = kmeans.predict(df_new_scaled)
labels

df_new['KMeans_Labels'] = labels
df_new

mean = df_new.groupby('KMeans_Labels').mean()
median = df_new.groupby('KMeans_Labels').median()
df_new_compare = pd.concat([mean,median],axis=0)
df_new_compare.index = ['g0 mean', 'g1 mean', 'g0 median', 'g1 median']
df_new_compare.T

category = []
for idx, row in df_new.iterrows():
  if(row['KMeans_Labels']==0):
    category.append('Rare User')
  else:
    category.append('Regular User')
df_new['Category'] = category
df_new

df_new_vis = df_new.drop(columns=['CustomerID','Category'])
df_new_vis

cols = list(df_new_vis.columns)
for col in cols:
  plt.figure(figsize=(10,5))
  sns.violinplot(x='KMeans_Labels',y=col,data=df_new_vis)
  plt.show()

cols = list(df_new_vis.columns)
for col in cols:
  plt.figure(figsize=(10,5))
  sns.boxplot(x='KMeans_Labels',y=col,data=df_new_vis)
  plt.show()

cols = list(df_new_vis.columns)
for col in cols:
  plt.figure(figsize=(10,5))
  sns.scatterplot(x=col,y='Amount',hue='KMeans_Labels',data=df_new_vis,palette='Dark2')
  plt.show()