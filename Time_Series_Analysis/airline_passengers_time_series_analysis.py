# -*- coding: utf-8 -*-
"""Airline_Passengers_Time_Series_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tEBTSrxuZbGH5PKMrn4do2BhZEt-9ANd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.tsa.arima.model import ARIMA

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/AirPassengers.csv')
df

df.info()

df.describe()

df['Month'] = pd.to_datetime(df['Month'])

df.index = df['Month']

df = df.rename(columns={'#Passengers':'Passengers'})

del df['Month']

plt.figure(figsize=(15,10))
df.plot(color='blue',alpha=0.5)
plt.grid(True)
plt.show()

mean_log = df.rolling(window=12).mean()
std_log = df.rolling(window=12).std()

plt.plot(df,color='red',label='Original')
plt.plot(mean_log,color='blue',label='Rolling Mean')
plt.plot(std_log,color='green',label='Rolling Std')
plt.legend(loc='best')

from statsmodels.tsa.stattools import adfuller
print(adfuller(df['Passengers']))

first_log = np.log(df)
first_log = first_log.dropna()
print(adfuller(first_log['Passengers']))

first_log

mean_first_log = first_log.rolling(window=12).mean()

new_log = first_log - mean_first_log
new_log.dropna(inplace=True)
print(adfuller(new_log['Passengers']))

new_log.plot(color='green',alpha=0.5)

new_log.head()

mean_new_log = new_log.rolling(window=12).mean()
std_new_log = new_log.rolling(window=12).std()

plt.plot(new_log,color='red',label='Original',alpha=0.5)
plt.plot(mean_new_log,color='blue',label='Rolling Mean')
plt.plot(std_new_log,color='green',label='Rolling Std')
plt.legend(loc='best')

sdr = seasonal_decompose(df['Passengers'].dropna())
sdr.plot()

sdr1 = seasonal_decompose(new_log['Passengers'].dropna())
sdr1.plot()

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

acf_plot = acf(new_log)
pacf_plot = pacf(new_log)
plot_acf(acf_plot)

plot_pacf(pacf_plot,lags = 10)

from statsmodels.tsa.arima.model import ARIMA
train = new_log[:120]['Passengers']
test = new_log[121:]['Passengers']
model = ARIMA(train, order=(1,0,2))
model_fit = model.fit()
model_fit.summary()

new_log['Predicted'] = model_fit.predict(start = len(train), end = len(train) + len(test) - 1, dynamic=True)

new_log[['Passengers','Predicted']].plot()

from statsmodels.tsa.statespace.sarimax import SARIMAX, SARIMAXResults

model1 = SARIMAX(train, order=(1,0,2), seasonal_order=(1,0,2,12))
model1_fit = model1.fit()
model1_fit.summary()

new_log['Seasonal Predicted'] = model1_fit.predict(start=len(train), end=len(train)+len(test)-1,dynamic=True)
new_log.tail()

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(new_log[['Passengers','Seasonal Predicted']])
plt.title('SARIMAX Model')
plt.subplot(1,2,2)
plt.plot(new_log[['Passengers','Predicted']])
plt.title('ARIMA Model')
plt.show()

fc = model1_fit.forecast(steps=60)
new_log.plot()
fc.plot()

fc

df_new = pd.DataFrame(fc)

df_new = df_new.rename(columns={'predicted_mean':'predicted'})

df_new